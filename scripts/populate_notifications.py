"""
Script para popular notifica√ß√µes de teste

@fileoverview Script de popula√ß√£o de notifica√ß√µes do DOM v1
@directory scripts
@description Script para criar notifica√ß√µes de teste no banco de dados
@created 2024-12-19
@lastModified 2024-12-19
@author Equipe DOM v1
"""

import sys
import os
import random
from datetime import datetime, timedelta

# Adiciona o diret√≥rio raiz ao path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from domcore.services.notification_service import NotificationService
from domcore.services.user_service import UserService
from domcore.core.enums import NotificationType, UserProfile
from domcore.core.db import SessionLocal

def create_test_notifications():
    """Cria notifica√ß√µes de teste para todos os usu√°rios"""
    
    print("üöÄ Iniciando cria√ß√£o de notifica√ß√µes de teste...")
    
    try:
        # Busca todos os usu√°rios
        db = SessionLocal()
        users_data = UserService.get_users(db)
        users = users_data["items"]
        
        if not users:
            print("‚ùå Nenhum usu√°rio encontrado. Execute primeiro o script de popula√ß√£o de usu√°rios.")
            return
        
        print(f"üìã Encontrados {len(users)} usu√°rios")
        
        # Tipos de notifica√ß√£o dispon√≠veis
        notification_types = [
            NotificationType.TASK_CREATED,
            NotificationType.TASK_COMPLETED,
            NotificationType.TASK_OVERDUE,
            NotificationType.PAYMENT_DUE,
            NotificationType.PAYMENT_RECEIVED,
            NotificationType.SYSTEM_ALERT,
            NotificationType.FAMILY_SHARE
        ]
        
        # Prioridades
        priorities = ['baixa', 'normal', 'alta', 'urgente']
        
        # Categorias
        categories = ['tarefas', 'pagamentos', 'sistema', 'familia']
        
        # T√≠tulos e mensagens por tipo
        notification_templates = {
            NotificationType.TASK_CREATED: {
                'titles': [
                    'Nova Tarefa Criada',
                    'Tarefa Atribu√≠da',
                    'Nova Atividade',
                    'Tarefa Pendente'
                ],
                'messages': [
                    'Uma nova tarefa foi criada para voc√™',
                    'Voc√™ tem uma nova tarefa para realizar',
                    'Nova atividade foi adicionada √† sua lista',
                    'Uma tarefa foi atribu√≠da ao seu perfil'
                ]
            },
            NotificationType.TASK_COMPLETED: {
                'titles': [
                    'Tarefa Conclu√≠da',
                    'Atividade Finalizada',
                    'Tarefa Completada',
                    'Trabalho Realizado'
                ],
                'messages': [
                    'Parab√©ns! Uma tarefa foi conclu√≠da com sucesso',
                    'Atividade foi finalizada com √™xito',
                    'Tarefa foi completada dentro do prazo',
                    'Trabalho foi realizado com qualidade'
                ]
            },
            NotificationType.TASK_OVERDUE: {
                'titles': [
                    'Tarefa Atrasada',
                    'Prazo Expirado',
                    'Tarefa Pendente',
                    'Aten√ß√£o: Tarefa Atrasada'
                ],
                'messages': [
                    'Uma tarefa est√° atrasada e precisa de aten√ß√£o',
                    'O prazo para uma tarefa expirou',
                    'Tarefa pendente que requer a√ß√£o imediata',
                    'Aten√ß√£o: h√° uma tarefa atrasada'
                ]
            },
            NotificationType.PAYMENT_DUE: {
                'titles': [
                    'Pagamento Pendente',
                    'Vencimento Pr√≥ximo',
                    'Pagamento Devido',
                    'Aten√ß√£o: Pagamento'
                ],
                'messages': [
                    'Voc√™ tem um pagamento pendente',
                    'O vencimento de um pagamento est√° pr√≥ximo',
                    'H√° um pagamento devido que precisa ser realizado',
                    'Aten√ß√£o: h√° um pagamento pendente'
                ]
            },
            NotificationType.PAYMENT_RECEIVED: {
                'titles': [
                    'Pagamento Recebido',
                    'Pagamento Confirmado',
                    'Recebimento Confirmado',
                    'Pagamento Processado'
                ],
                'messages': [
                    'Um pagamento foi recebido com sucesso',
                    'Pagamento foi confirmado e processado',
                    'Recebimento foi confirmado no sistema',
                    'Pagamento foi processado com √™xito'
                ]
            },
            NotificationType.SYSTEM_ALERT: {
                'titles': [
                    'Alerta do Sistema',
                    'Aviso Importante',
                    'Notifica√ß√£o do Sistema',
                    'Informa√ß√£o do Sistema'
                ],
                'messages': [
                    'O sistema tem uma informa√ß√£o importante para voc√™',
                    'Aviso importante do sistema',
                    'Notifica√ß√£o do sistema que requer aten√ß√£o',
                    'Informa√ß√£o relevante do sistema'
                ]
            },
            NotificationType.FAMILY_SHARE: {
                'titles': [
                    'Compartilhamento Familiar',
                    'Atualiza√ß√£o Familiar',
                    'Informa√ß√£o da Fam√≠lia',
                    'Compartilhamento'
                ],
                'messages': [
                    'H√° uma atualiza√ß√£o compartilhada pela fam√≠lia',
                    'Informa√ß√£o importante da fam√≠lia',
                    'Compartilhamento familiar que pode interessar',
                    'Atualiza√ß√£o compartilhada pelos familiares'
                ]
            }
        }
        
        # Cria notifica√ß√µes para cada usu√°rio
        total_created = 0
        
        with NotificationService() as notification_service:
            for user in users:
                print(f"üìù Criando notifica√ß√µes para usu√°rio: {user['name']} ({user['perfil']})")
                
                # N√∫mero de notifica√ß√µes por usu√°rio (baseado no perfil)
                profile_notification_counts = {
                    UserProfile.EMPREGADOR: random.randint(8, 15),
                    UserProfile.EMPREGADO: random.randint(5, 10),
                    UserProfile.FAMILIAR: random.randint(3, 8),
                    UserProfile.PARCEIRO: random.randint(12, 20),
                    UserProfile.SUBORDINADO: random.randint(6, 12),
                    UserProfile.ADMIN: random.randint(15, 25),
                    UserProfile.OWNER: random.randint(20, 30)
                }
                
                # Mapeia perfis do banco para enum
                profile_mapping = {
                    'empregador': UserProfile.EMPREGADOR,
                    'empregado': UserProfile.EMPREGADO,
                    'familiar': UserProfile.FAMILIAR,
                    'parceiro': UserProfile.PARCEIRO,
                    'subordinado': UserProfile.SUBORDINADO,
                    'admin': UserProfile.ADMIN,
                    'owner': UserProfile.OWNER
                }
                
                user_profile = profile_mapping.get(user['perfil'], UserProfile.EMPREGADOR)
                notification_count = profile_notification_counts.get(user_profile, 10)
                
                for i in range(notification_count):
                    # Seleciona tipo aleat√≥rio
                    notification_type = random.choice(notification_types)
                    
                    # Obt√©m template
                    template = notification_templates[notification_type]
                    title = random.choice(template['titles'])
                    message = random.choice(template['messages'])
                    
                    # Seleciona prioridade (urgente √© mais raro)
                    priority_weights = {
                        'baixa': 0.3,
                        'normal': 0.5,
                        'alta': 0.15,
                        'urgente': 0.05
                    }
                    priority = random.choices(
                        list(priority_weights.keys()),
                        weights=list(priority_weights.values())
                    )[0]
                    
                    # Seleciona categoria
                    category = random.choice(categories)
                    
                    # Data de cria√ß√£o (√∫ltimos 30 dias)
                    days_ago = random.randint(0, 30)
                    creation_date = datetime.utcnow() - timedelta(days=days_ago)
                    
                    # Se √© lida (70% de chance)
                    is_read = random.random() < 0.7
                    
                    # Dados extras
                    dados_extras = {
                        'created_by_script': True,
                        'test_data': True,
                        'user_profile': user['perfil']
                    }
                    
                    # Cria a notifica√ß√£o
                    from domcore.models.notification import NotificationCreate
                    
                    notification_data = NotificationCreate(
                        tipo=notification_type,
                        titulo=title,
                        mensagem=message,
                        destinatario_id=str(user['id']),
                        remetente_id=None,  # Sistema
                        prioridade=priority,
                        categoria=category,
                        dados_extras=dados_extras
                    )
                    
                    try:
                        notification = notification_service.create_notification(notification_data)
                        total_created += 1
                        
                        # Se √© lida, marca como lida
                        if is_read:
                            notification_service.mark_as_read(str(notification.id), str(user['id']))
                        
                    except Exception as e:
                        print(f"‚ùå Erro ao criar notifica√ß√£o: {e}")
                        continue
                
                print(f"‚úÖ Criadas {notification_count} notifica√ß√µes para {user['name']}")
        
        print(f"\nüéâ Processo conclu√≠do!")
        print(f"üìä Total de notifica√ß√µes criadas: {total_created}")
        print(f"üë• Usu√°rios processados: {len(users)}")
        
    except Exception as e:
        print(f"‚ùå Erro durante a cria√ß√£o de notifica√ß√µes: {e}")
        raise

if __name__ == "__main__":
    create_test_notifications() 