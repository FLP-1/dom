#!/usr/bin/env python3
"""
Teste de Instala√ß√£o - DOM v1 Python
Valida se a instala√ß√£o est√° funcionando corretamente

@fileoverview Teste de instala√ß√£o do DOM v1
@directory .
@description Valida√ß√£o da instala√ß√£o Python
@created 2024-12-19
@lastModified 2024-12-19
@author Equipe DOM v1
"""

import sys
import asyncio
from pathlib import Path
from domcore.utils.cpf_validator import CPFValidator
from domcore.utils.receita_federal import ReceitaFederalService
from domcore.core.enums import UserProfile
from domcore.models.user import UserProfileInfo, UserCreate

# Adiciona o diret√≥rio atual ao path
sys.path.append(str(Path(__file__).parent))


def test_imports():
    """Testa importa√ß√£o dos m√≥dulos principais"""
    print("üîç Testando importa√ß√µes...")
    
    try:
        from domcore.core.enums import UserProfile, TaskStatus
        print("‚úÖ Enums importados")
        
        from domcore.core.config import config
        print("‚úÖ Configura√ß√£o importada")
        
        from domcore.core.exceptions import DOMException, CPFError
        print("‚úÖ Exce√ß√µes importadas")
        
        from domcore.utils.cpf_validator import CPFValidator
        print("‚úÖ Validador de CPF importado")
        
        from domcore.utils.receita_federal import ReceitaFederalService
        print("‚úÖ Servi√ßo RF importado")
        
        from domcore.models.user import User, UserProfileInfo
        print("‚úÖ Modelos de usu√°rio importados")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        return False


def test_cpf_validation():
    """Testa valida√ß√£o de CPF"""
    print("\nüîç Testando valida√ß√£o de CPF...")
    
    try:
        # CPFs v√°lidos
        cpfs_validos = ["529.982.247-25", "626.487.160-50", "168.995.350-09"]
        
        for cpf in cpfs_validos:
            if CPFValidator.validate_cpf(cpf):
                formatted = CPFValidator.format_cpf(cpf)
                print(f"‚úÖ {cpf} -> {formatted}")
            else:
                print(f"‚ùå {cpf} - CPF inv√°lido")
                return False
        
        # CPF inv√°lido
        cpf_invalido = "123.456.789-10"
        if not CPFValidator.validate_cpf(cpf_invalido):
            print(f"‚úÖ {cpf_invalido} - Corretamente rejeitado")
        else:
            print(f"‚ùå {cpf_invalido} - Deveria ser inv√°lido")
            return False
        
        # Gera√ß√£o de CPF
        cpf_gerado = CPFValidator.generate_valid_cpf()
        if CPFValidator.validate_cpf(cpf_gerado):
            print(f"‚úÖ CPF gerado: {cpf_gerado}")
        else:
            print(f"‚ùå CPF gerado inv√°lido: {cpf_gerado}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na valida√ß√£o de CPF: {e}")
        return False


async def test_receita_federal():
    """Testa servi√ßo da Receita Federal"""
    print("\nüîç Testando servi√ßo da Receita Federal...")
    
    try:
        service = ReceitaFederalService()
        
        # Testa consulta v√°lida
        dados = await service.consultar_cpf("598.769.137-00")
        if dados and "nome" in dados:
            print(f"‚úÖ Consulta RF: {dados['nome']}")
        else:
            print("‚ùå Consulta RF falhou")
            return False
        
        # Testa CPF n√£o encontrado
        try:
            await service.consultar_cpf("999.888.777-66")
            print("‚ùå CPF n√£o encontrado deveria gerar erro")
            return False
        except ReceitaFederalError:
            print("‚úÖ CPF n√£o encontrado - erro correto")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no servi√ßo RF: {e}")
        return False


def test_user_profiles():
    """Testa perfis de usu√°rio"""
    print("\nüîç Testando perfis de usu√°rio...")
    
    try:
        for profile in UserProfile:
            # Testa configura√ß√£o de tema
            tema = UserProfile.get_theme_config(profile)
            if tema and "primary_color" in tema:
                print(f"‚úÖ {profile.value}: {tema['primary_color']}")
            else:
                print(f"‚ùå Tema n√£o encontrado para {profile.value}")
                return False
            
            # Testa informa√ß√µes do perfil
            profile_info = UserProfileInfo.from_profile(profile)
            if profile_info.permissoes and profile_info.funcionalidades:
                print(f"   üîê {len(profile_info.permissoes)} permiss√µes")
                print(f"   ‚öôÔ∏è {len(profile_info.funcionalidades)} funcionalidades")
            else:
                print(f"‚ùå Informa√ß√µes n√£o encontradas para {profile.value}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro nos perfis: {e}")
        return False


def test_user_creation():
    """Testa cria√ß√£o de usu√°rio"""
    print("\nüîç Testando cria√ß√£o de usu√°rio...")
    
    try:
        # Dados v√°lidos
        user_data = {
            "cpf": "529.982.247-25",
            "nome": "Maria Silva Santos",
            "email": "maria@exemplo.com",
            "telefone": "(11) 99999-9999",
            "perfil": UserProfile.EMPREGADOR,
            "senha": "senha123",
            "confirmar_senha": "senha123"
        }
        
        user_create = UserCreate(**user_data)
        print(f"‚úÖ Usu√°rio criado: {user_create.nome}")
        
        # Testa valida√ß√£o de email
        try:
            invalid_email_data = user_data.copy()
            invalid_email_data["email"] = "email-invalido"
            UserCreate(**invalid_email_data)
            print("‚ùå Email inv√°lido deveria gerar erro")
            return False
        except ValueError:
            print("‚úÖ Email inv√°lido - erro correto")
        
        # Testa confirma√ß√£o de senha
        try:
            invalid_password_data = user_data.copy()
            invalid_password_data["confirmar_senha"] = "senha-diferente"
            UserCreate(**invalid_password_data)
            print("‚ùå Senhas diferentes deveriam gerar erro")
            return False
        except ValueError:
            print("‚úÖ Senhas diferentes - erro correto")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na cria√ß√£o de usu√°rio: {e}")
        return False


def test_configuration():
    """Testa configura√ß√£o do sistema"""
    print("\nüîç Testando configura√ß√£o...")
    
    try:
        from domcore.core.config import config
        
        # Verifica configura√ß√µes b√°sicas
        if config.environment:
            print(f"‚úÖ Ambiente: {config.environment}")
        else:
            print("‚ùå Ambiente n√£o configurado")
            return False
        
        if config.database:
            print(f"‚úÖ Database: {config.database.host}:{config.database.port}")
        else:
            print("‚ùå Database n√£o configurado")
            return False
        
        if config.security:
            print(f"‚úÖ Security: {config.security.algorithm}")
        else:
            print("‚ùå Security n√£o configurado")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na configura√ß√£o: {e}")
        return False


async def run_all_tests():
    """Executa todos os testes"""
    print("üöÄ Iniciando testes de instala√ß√£o...")
    print("=" * 50)
    
    tests = [
        ("Importa√ß√µes", test_imports),
        ("Valida√ß√£o de CPF", test_cpf_validation),
        ("Receita Federal", test_receita_federal),
        ("Perfis de Usu√°rio", test_user_profiles),
        ("Cria√ß√£o de Usu√°rio", test_user_creation),
        ("Configura√ß√£o", test_configuration),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            
            if result:
                passed += 1
            else:
                print(f"‚ùå Teste '{test_name}' falhou")
                
        except Exception as e:
            print(f"‚ùå Erro no teste '{test_name}': {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä Resultados: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ Todos os testes passaram! Instala√ß√£o OK!")
        return True
    else:
        print("‚ùå Alguns testes falharam. Verifique a instala√ß√£o.")
        return False


if __name__ == "__main__":
    success = asyncio.run(run_all_tests())
    sys.exit(0 if success else 1) 
