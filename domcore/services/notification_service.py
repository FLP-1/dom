"""
Servi√ßo de Notifica√ß√µes - Gerenciamento completo de notifica√ß√µes

@fileoverview Servi√ßo de notifica√ß√µes do DOM v1
@directory domcore/services
@description Servi√ßo para criar, gerenciar e enviar notifica√ß√µes do sistema
@created 2024-12-19
@lastModified 2024-12-19
@author Equipe DOM v1
"""

from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any
from sqlalchemy.orm import Session
from sqlalchemy import and_, or_, func, desc
import uuid
import logging

from ..models.notification import (
    NotificationDB, 
    NotificationCreate, 
    NotificationUpdate, 
    Notification, 
    NotificationStats
)
from ..core.enums import NotificationType, UserProfile
from ..core.exceptions import NotFoundException, ValidationError, NotificationError
from ..core.db import SessionLocal

logger = logging.getLogger(__name__)

class NotificationService:
    """Servi√ßo para gerenciar notifica√ß√µes do sistema"""
    
    def __init__(self, db: Optional[Session] = None):
        """Inicializa o servi√ßo com sess√£o do banco"""
        self.db = db or SessionLocal()
    
    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        if not self.db:
            self.db.close()
    
    def create_notification(self, notification_data: NotificationCreate) -> Notification:
        """
        Cria uma nova notifica√ß√£o
        
        Args:
            notification_data: Dados da notifica√ß√£o a ser criada
            
        Returns:
            Notification: Notifica√ß√£o criada
            
        Raises:
            ValidationError: Se os dados forem inv√°lidos
            NotificationError: Se houver erro na cria√ß√£o
        """
        try:
            # Gera ID √∫nico
            notification_id = f"notif_{uuid.uuid4().hex[:12]}"
            
            # Cria inst√¢ncia do banco
            db_notification = NotificationDB(
                id=notification_id,
                tipo=notification_data.tipo.value,
                titulo=notification_data.titulo,
                mensagem=notification_data.mensagem,
                destinatario_id=notification_data.destinatario_id,
                remetente_id=notification_data.remetente_id,
                prioridade=notification_data.prioridade,
                categoria=notification_data.categoria,
                dados_extras=notification_data.dados_extras,
                data_criacao=datetime.utcnow(),
                data_atualizacao=datetime.utcnow()
            )
            
            # Salva no banco
            self.db.add(db_notification)
            self.db.commit()
            self.db.refresh(db_notification)
            
            # Converte para modelo Pydantic
            notification = Notification.from_orm(db_notification)
            
            logger.info(f"‚úÖ Notifica√ß√£o criada: {notification_id}")
            return notification
            
        except Exception as e:
            self.db.rollback()
            logger.error(f"‚ùå Erro ao criar notifica√ß√£o: {e}")
            raise NotificationError(f"Erro ao criar notifica√ß√£o: {str(e)}")
    
    def get_notification(self, notification_id: str) -> Notification:
        """
        Busca uma notifica√ß√£o por ID
        
        Args:
            notification_id: ID da notifica√ß√£o
            
        Returns:
            Notification: Notifica√ß√£o encontrada
            
        Raises:
            NotFoundException: Se a notifica√ß√£o n√£o for encontrada
        """
        db_notification = self.db.query(NotificationDB).filter(
            NotificationDB.id == notification_id,
            NotificationDB.ativo == True
        ).first()
        
        if not db_notification:
            raise NotFoundException(f"Notifica√ß√£o {notification_id} n√£o encontrada")
        
        return Notification.from_orm(db_notification)
    
    def get_user_notifications(
        self, 
        user_id: str, 
        profile: UserProfile,
        limit: int = 50, 
        offset: int = 0,
        unread_only: bool = False,
        notification_type: Optional[NotificationType] = None
    ) -> List[Notification]:
        """
        Busca notifica√ß√µes de um usu√°rio com filtros
        
        Args:
            user_id: ID do usu√°rio
            profile: Perfil do usu√°rio para adapta√ß√£o
            limit: Limite de resultados
            offset: Offset para pagina√ß√£o
            unread_only: Apenas n√£o lidas
            notification_type: Tipo espec√≠fico de notifica√ß√£o
            
        Returns:
            List[Notification]: Lista de notifica√ß√µes
        """
        try:
            # Query base
            query = self.db.query(NotificationDB).filter(
                NotificationDB.destinatario_id == user_id,
                NotificationDB.ativo == True
            )
            
            # Filtros adicionais
            if unread_only:
                query = query.filter(NotificationDB.lida == False)
            
            if notification_type:
                query = query.filter(NotificationDB.tipo == notification_type.value)
            
            # Ordena√ß√£o por data de cria√ß√£o (mais recentes primeiro)
            query = query.order_by(desc(NotificationDB.data_criacao))
            
            # Pagina√ß√£o
            query = query.offset(offset).limit(limit)
            
            # Executa query
            db_notifications = query.all()
            
            # Converte para modelos Pydantic
            notifications = [Notification.from_orm(n) for n in db_notifications]
            
            logger.info(f"üìã Buscadas {len(notifications)} notifica√ß√µes para usu√°rio {user_id}")
            return notifications
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao buscar notifica√ß√µes: {e}")
            return []
    
    def mark_as_read(self, notification_id: str, user_id: str) -> Notification:
        """
        Marca uma notifica√ß√£o como lida
        
        Args:
            notification_id: ID da notifica√ß√£o
            user_id: ID do usu√°rio (para valida√ß√£o)
            
        Returns:
            Notification: Notifica√ß√£o atualizada
            
        Raises:
            NotFoundException: Se a notifica√ß√£o n√£o for encontrada
            ValidationError: Se o usu√°rio n√£o for o destinat√°rio
        """
        try:
            # Busca a notifica√ß√£o
            db_notification = self.db.query(NotificationDB).filter(
                NotificationDB.id == notification_id,
                NotificationDB.ativo == True
            ).first()
            
            if not db_notification:
                raise NotFoundException(f"Notifica√ß√£o {notification_id} n√£o encontrada")
            
            # Valida se o usu√°rio √© o destinat√°rio
            if db_notification.destinatario_id != user_id:
                raise ValidationError("Usu√°rio n√£o autorizado a marcar esta notifica√ß√£o como lida")
            
            # Atualiza status
            db_notification.lida = True
            db_notification.data_leitura = datetime.utcnow()
            db_notification.data_atualizacao = datetime.utcnow()
            
            # Salva no banco
            self.db.commit()
            self.db.refresh(db_notification)
            
            notification = Notification.from_orm(db_notification)
            
            logger.info(f"‚úÖ Notifica√ß√£o {notification_id} marcada como lida")
            return notification
            
        except Exception as e:
            self.db.rollback()
            logger.error(f"‚ùå Erro ao marcar notifica√ß√£o como lida: {e}")
            raise
    
    def mark_all_as_read(self, user_id: str) -> int:
        """
        Marca todas as notifica√ß√µes de um usu√°rio como lidas
        
        Args:
            user_id: ID do usu√°rio
            
        Returns:
            int: N√∫mero de notifica√ß√µes marcadas como lidas
        """
        try:
            # Busca notifica√ß√µes n√£o lidas
            unread_notifications = self.db.query(NotificationDB).filter(
                NotificationDB.destinatario_id == user_id,
                NotificationDB.lida == False,
                NotificationDB.ativo == True
            ).all()
            
            # Marca como lidas
            now = datetime.utcnow()
            for notification in unread_notifications:
                notification.lida = True
                notification.data_leitura = now
                notification.data_atualizacao = now
            
            # Salva no banco
            self.db.commit()
            
            count = len(unread_notifications)
            logger.info(f"‚úÖ {count} notifica√ß√µes marcadas como lidas para usu√°rio {user_id}")
            return count
            
        except Exception as e:
            self.db.rollback()
            logger.error(f"‚ùå Erro ao marcar notifica√ß√µes como lidas: {e}")
            return 0
    
    def update_notification(self, notification_id: str, update_data: NotificationUpdate) -> Notification:
        """
        Atualiza uma notifica√ß√£o
        
        Args:
            notification_id: ID da notifica√ß√£o
            update_data: Dados para atualiza√ß√£o
            
        Returns:
            Notification: Notifica√ß√£o atualizada
            
        Raises:
            NotFoundException: Se a notifica√ß√£o n√£o for encontrada
        """
        try:
            # Busca a notifica√ß√£o
            db_notification = self.db.query(NotificationDB).filter(
                NotificationDB.id == notification_id,
                NotificationDB.ativo == True
            ).first()
            
            if not db_notification:
                raise NotFoundException(f"Notifica√ß√£o {notification_id} n√£o encontrada")
            
            # Atualiza campos fornecidos
            update_dict = update_data.dict(exclude_unset=True)
            for field, value in update_dict.items():
                setattr(db_notification, field, value)
            
            # Atualiza data de modifica√ß√£o
            db_notification.data_atualizacao = datetime.utcnow()
            
            # Salva no banco
            self.db.commit()
            self.db.refresh(db_notification)
            
            notification = Notification.from_orm(db_notification)
            
            logger.info(f"‚úÖ Notifica√ß√£o {notification_id} atualizada")
            return notification
            
        except Exception as e:
            self.db.rollback()
            logger.error(f"‚ùå Erro ao atualizar notifica√ß√£o: {e}")
            raise
    
    def delete_notification(self, notification_id: str, user_id: str) -> bool:
        """
        Deleta uma notifica√ß√£o (soft delete)
        
        Args:
            notification_id: ID da notifica√ß√£o
            user_id: ID do usu√°rio (para valida√ß√£o)
            
        Returns:
            bool: True se deletada com sucesso
            
        Raises:
            NotFoundException: Se a notifica√ß√£o n√£o for encontrada
            ValidationError: Se o usu√°rio n√£o for o destinat√°rio
        """
        try:
            # Busca a notifica√ß√£o
            db_notification = self.db.query(NotificationDB).filter(
                NotificationDB.id == notification_id,
                NotificationDB.ativo == True
            ).first()
            
            if not db_notification:
                raise NotFoundException(f"Notifica√ß√£o {notification_id} n√£o encontrada")
            
            # Valida se o usu√°rio √© o destinat√°rio
            if db_notification.destinatario_id != user_id:
                raise ValidationError("Usu√°rio n√£o autorizado a deletar esta notifica√ß√£o")
            
            # Soft delete
            db_notification.ativo = False
            db_notification.data_atualizacao = datetime.utcnow()
            
            # Salva no banco
            self.db.commit()
            
            logger.info(f"‚úÖ Notifica√ß√£o {notification_id} deletada")
            return True
            
        except Exception as e:
            self.db.rollback()
            logger.error(f"‚ùå Erro ao deletar notifica√ß√£o: {e}")
            raise
    
    def get_notification_stats(self, user_id: str, profile: UserProfile) -> NotificationStats:
        """
        Busca estat√≠sticas de notifica√ß√µes para um usu√°rio
        
        Args:
            user_id: ID do usu√°rio
            profile: Perfil do usu√°rio para adapta√ß√£o
            
        Returns:
            NotificationStats: Estat√≠sticas de notifica√ß√µes
        """
        try:
            # Filtro base
            base_filter = and_(
                NotificationDB.destinatario_id == user_id,
                NotificationDB.ativo == True
            )
            
            # Total de notifica√ß√µes
            total_notificacoes = self.db.query(func.count(NotificationDB.id)).filter(
                base_filter
            ).scalar() or 0
            
            # Notifica√ß√µes n√£o lidas
            notificacoes_nao_lidas = self.db.query(func.count(NotificationDB.id)).filter(
                base_filter,
                NotificationDB.lida == False
            ).scalar() or 0
            
            # Notifica√ß√µes de hoje
            hoje = datetime.utcnow().date()
            notificacoes_hoje = self.db.query(func.count(NotificationDB.id)).filter(
                base_filter,
                func.date(NotificationDB.data_criacao) == hoje
            ).scalar() or 0
            
            # Notifica√ß√µes da semana
            fim_semana = hoje + timedelta(days=7)
            notificacoes_semana = self.db.query(func.count(NotificationDB.id)).filter(
                base_filter,
                func.date(NotificationDB.data_criacao) <= fim_semana,
                func.date(NotificationDB.data_criacao) >= hoje
            ).scalar() or 0
            
            # Notifica√ß√µes urgentes
            notificacoes_urgentes = self.db.query(func.count(NotificationDB.id)).filter(
                base_filter,
                NotificationDB.prioridade == "urgente"
            ).scalar() or 0
            
            # Notifica√ß√µes por tipo
            notificacoes_por_tipo = {}
            tipos = self.db.query(
                NotificationDB.tipo, 
                func.count(NotificationDB.id)
            ).filter(base_filter).group_by(NotificationDB.tipo).all()
            
            for tipo, count in tipos:
                notificacoes_por_tipo[tipo] = count
            
            stats = NotificationStats(
                total_notificacoes=total_notificacoes,
                notificacoes_nao_lidas=notificacoes_nao_lidas,
                notificacoes_hoje=notificacoes_hoje,
                notificacoes_semana=notificacoes_semana,
                notificacoes_urgentes=notificacoes_urgentes,
                notificacoes_por_tipo=notificacoes_por_tipo
            )
            
            logger.info(f"üìä Estat√≠sticas de notifica√ß√µes geradas para usu√°rio {user_id}")
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar estat√≠sticas: {e}")
            # Retorna estat√≠sticas vazias em caso de erro
            return NotificationStats()
    
    def create_system_notification(
        self, 
        titulo: str, 
        mensagem: str, 
        destinatario_id: str,
        notification_type: NotificationType = NotificationType.SYSTEM_ALERT,
        prioridade: str = "normal",
        dados_extras: Optional[Dict[str, Any]] = None
    ) -> Notification:
        """
        Cria uma notifica√ß√£o do sistema
        
        Args:
            titulo: T√≠tulo da notifica√ß√£o
            mensagem: Mensagem da notifica√ß√£o
            destinatario_id: ID do destinat√°rio
            notification_type: Tipo da notifica√ß√£o
            prioridade: Prioridade da notifica√ß√£o
            dados_extras: Dados extras
            
        Returns:
            Notification: Notifica√ß√£o criada
        """
        notification_data = NotificationCreate(
            tipo=notification_type,
            titulo=titulo,
            mensagem=mensagem,
            destinatario_id=destinatario_id,
            remetente_id=None,  # Sistema
            prioridade=prioridade,
            categoria="sistema",
            dados_extras=dados_extras or {}
        )
        
        return self.create_notification(notification_data)
    
    def create_task_notification(
        self,
        task_id: str,
        task_titulo: str,
        destinatario_id: str,
        notification_type: NotificationType,
        remetente_id: Optional[str] = None,
        prioridade: str = "normal"
    ) -> Notification:
        """
        Cria uma notifica√ß√£o relacionada a tarefas
        
        Args:
            task_id: ID da tarefa
            task_titulo: T√≠tulo da tarefa
            destinatario_id: ID do destinat√°rio
            notification_type: Tipo da notifica√ß√£o
            remetente_id: ID do remetente
            prioridade: Prioridade da notifica√ß√£o
            
        Returns:
            Notification: Notifica√ß√£o criada
        """
        # Mapeia tipos para t√≠tulos e mensagens
        type_messages = {
            NotificationType.TASK_CREATED: {
                "titulo": "Nova Tarefa Criada",
                "mensagem": f"Uma nova tarefa foi criada: {task_titulo}"
            },
            NotificationType.TASK_COMPLETED: {
                "titulo": "Tarefa Conclu√≠da",
                "mensagem": f"A tarefa foi conclu√≠da: {task_titulo}"
            },
            NotificationType.TASK_OVERDUE: {
                "titulo": "Tarefa Atrasada",
                "mensagem": f"A tarefa est√° atrasada: {task_titulo}",
                "prioridade": "alta"
            }
        }
        
        message_data = type_messages.get(notification_type, {
            "titulo": "Atualiza√ß√£o de Tarefa",
            "mensagem": f"Atualiza√ß√£o na tarefa: {task_titulo}"
        })
        
        notification_data = NotificationCreate(
            tipo=notification_type,
            titulo=message_data["titulo"],
            mensagem=message_data["mensagem"],
            destinatario_id=destinatario_id,
            remetente_id=remetente_id,
            prioridade=message_data.get("prioridade", prioridade),
            categoria="tarefas",
            dados_extras={"task_id": task_id, "task_titulo": task_titulo}
        )
        
        return self.create_notification(notification_data) 