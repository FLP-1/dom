# Cursor Rules - DOM v1
# Regras espec√≠ficas para o Cursor AI

## üéØ Contexto do Projeto

Este √© um aplicativo multiplataforma (web, iOS, Android) desenvolvido com:
- Monorepo usando Turbo
- React/Next.js para web
- React Native para mobile
- TypeScript rigoroso
- Material-UI v2
- Prisma + PostgreSQL
- Internacionaliza√ß√£o completa

## üë• Perfis de Usu√°rios

O aplicativo atende 7 perfis distintos que DEVEM ser considerados em todo desenvolvimento:

1. **Empregadores**: Mulheres 35-50 anos, ocupadas, boa experi√™ncia digital
   - UI/UX: Efici√™ncia m√°xima, menos cliques, interface limpa
   - Prioridades: Dashboard r√°pido, notifica√ß√µes inteligentes

2. **Empregados Dom√©sticos**: Mulheres 30-60 anos, pouca escolaridade, experi√™ncia digital limitada
   - UI/UX: Simplicidade extrema, textos grandes, bot√µes grandes
   - Prioridades: Interface simples, tutorial interativo, modo offline

3. **Familiares dos Empregadores**: 15-70 anos, experi√™ncia digital variada
   - UI/UX: Adapt√°vel por idade, compartilhamento f√°cil
   - Prioridades: Modo b√°sico/avan√ßado, notifica√ß√µes familiares

4. **Parceiros**: Donos de neg√≥cios, experi√™ncia avan√ßada, foco em ROI
   - UI/UX: Interface empresarial, m√©tricas em destaque
   - Prioridades: Dashboard de m√©tricas, white label, APIs

5. **Subordinados dos Parceiros**: Funcion√°rios dos parceiros, opera√ß√£o
   - UI/UX: Efici√™ncia operacional, clareza de responsabilidades
   - Prioridades: Interface operacional, relat√≥rios autom√°ticos

6. **Administradores**: Desenvolvedores/suporte, experi√™ncia avan√ßada
   - UI/UX: M√°xima informa√ß√£o, acesso r√°pido, dados t√©cnicos
   - Prioridades: Painel administrativo, logs detalhados

7. **Donos**: Fundadores, experi√™ncia expert, controle total
   - UI/UX: Vis√£o estrat√©gica, acesso completo, interface premium
   - Prioridades: Dashboard executivo, acesso ao c√≥digo/banco

**SEMPRE considerar o perfil do usu√°rio antes de implementar qualquer funcionalidade!**

## üìã Regras Obrigat√≥rias

### Cabe√ßalho em Todos os Arquivos
SEMPRE incluir cabe√ßalho JSDoc em TODOS os arquivos:
```typescript
/**
 * @fileoverview Nome do arquivo
 * @directory caminho/do/diretorio
 * @description Descri√ß√£o detalhada da fun√ß√£o do arquivo
 * @created 2024-12-19
 * @lastModified 2024-12-19
 * @author Nome do Desenvolvedor
 */
```

### Imports com Alias
SEMPRE usar imports com "@/" em vez de caminhos relativos:
```typescript
// ‚úÖ Correto
import { Button } from '@/components/ui/Button'
import { useAuth } from '@/hooks/useAuth'

// ‚ùå Incorreto
import { Button } from '../../../components/ui/Button'
```

### Proibi√ß√£o de "any"
NUNCA usar `any` no TypeScript. Sempre tipar corretamente:
```typescript
// ‚ùå NUNCA fazer isso
const data: any = response.data

// ‚úÖ Sempre fazer isso
interface UserData {
  id: string
  name: string
  email: string
}
const data: UserData = response.data
```

### Considera√ß√£o de Perfis
SEMPRE considerar o perfil do usu√°rio ao desenvolver:
```typescript
// ‚úÖ Correto - Componente adaptativo
interface UserProfileProps {
  profile: 'empregador' | 'empregado' | 'familiar' | 'parceiro' | 'subordinado' | 'admin' | 'owner'
  user: User
}

const UserProfile = ({ profile, user }: UserProfileProps) => {
  const theme = getThemeByProfile(profile)
  const isSimpleInterface = profile === 'empregado' || profile === 'familiar'
  
  return (
    <ThemeProvider theme={theme}>
      <Box className={`user-profile ${isSimpleInterface ? 'simple' : 'advanced'}`}>
        {/* Interface adaptada ao perfil */}
      </Box>
    </ThemeProvider>
  )
}

// ‚ùå Incorreto - Interface gen√©rica
const UserProfile = ({ user }: { user: User }) => {
  return <div>Perfil do usu√°rio</div> // Sem considerar perfil
}
```

### Tooltips Obrigat√≥rios
TODOS os inputs devem ter tooltips:
```typescript
<TextField
  label={t('user.email')}
  InputProps={{
    endAdornment: (
      <Tooltip title={t('user.email.help')}>
        <InfoIcon />
      </Tooltip>
    )
  }}
/>
```

### Componentes Reutiliz√°veis
Sempre criar componentes pequenos e reutiliz√°veis:
- M√°ximo 300 linhas por arquivo
- Props interface obrigat√≥ria
- Default props quando apropriado
- Memoiza√ß√£o para performance
- **Adapta√ß√£o por perfil obrigat√≥ria**

```typescript
// ‚úÖ Correto - Componente adaptativo
interface ButtonProps {
  profile: UserProfile
  variant?: 'simple' | 'standard' | 'advanced'
  children: React.ReactNode
  onClick?: () => void
}

const AdaptiveButton = memo<ButtonProps>(({ profile, variant = 'standard', children, onClick }) => {
  const theme = getThemeByProfile(profile)
  const buttonSize = profile === 'empregado' ? 'large' : 'medium'
  const buttonVariant = profile === 'empregado' ? 'contained' : 'outlined'
  
  return (
    <Button
      size={buttonSize}
      variant={buttonVariant}
      onClick={onClick}
      className={`adaptive-button ${variant}`}
    >
      {children}
    </Button>
  )
})
```

### Mensagens Centralizadas
SEMPRE usar mensagens centralizadas para i18n e adaptadas por perfil:
```typescript
// ‚úÖ Correto - Mensagens adaptadas por perfil
const { t } = useTranslation()
const { profile } = useUserProfile()

// Mensagem espec√≠fica do perfil ou fallback gen√©rico
const message = t(`${profile}.user.profile`) || t('user.profile')
return <Typography>{message}</Typography>

// ‚ùå Incorreto
return <Typography>Perfil do Usu√°rio</Typography>
```

### Estrutura de Mensagens por Perfil
```typescript
// shared/messages/pt-BR.ts
export const messages = {
  common: { save: 'Salvar', cancel: 'Cancelar' },
  empregador: {
    user: { profile: 'Meu Perfil', dashboard: 'Painel Principal' },
    tasks: { create: 'Criar Tarefa', manage: 'Gerenciar Tarefas' }
  },
  empregado: {
    user: { profile: 'Meu Perfil', dashboard: 'Minhas Tarefas' },
    tasks: { start: 'Iniciar Tarefa', complete: 'Tarefa Conclu√≠da' }
  },
  familiar: {
    user: { profile: 'Perfil Familiar', dashboard: 'Acompanhamento' },
    tasks: { view: 'Ver Tarefas', help: 'Ajudar' }
  }
  // ... outros perfis
}
```

## üé® Padr√µes de UI/UX

### Material-UI v2
- Usar componentes MUI como base
- Preferir √≠cones e cards sobre bot√µes simples
- Tema centralizado e consistente

### Acessibilidade
- ARIA labels obrigat√≥rios
- Navega√ß√£o por teclado
- Contraste adequado
- Screen reader friendly

## üèóÔ∏è Estrutura de Arquivos

### Nomenclatura
- **kebab-case**: arquivos e diret√≥rios (`user-profile.tsx`)
- **PascalCase**: componentes React (`UserProfile.tsx`)
- **camelCase**: vari√°veis e fun√ß√µes (`getUserData()`)
- **snake_case**: banco de dados (`user_profiles`)

### Organiza√ß√£o
```
components/
‚îú‚îÄ‚îÄ ComponentName/
‚îÇ   ‚îú‚îÄ‚îÄ ComponentName.tsx
‚îÇ   ‚îú‚îÄ‚îÄ ComponentName.types.ts
‚îÇ   ‚îú‚îÄ‚îÄ ComponentName.test.tsx
‚îÇ   ‚îî‚îÄ‚îÄ index.ts
```

## üß™ Testes

### Obrigat√≥rios
- Testes unit√°rios para todos os componentes
- Testes de integra√ß√£o para servi√ßos
- Coverage m√≠nimo de 80%

### Padr√£o de Teste
```typescript
describe('ComponentName', () => {
  it('should render correctly', () => {
    render(<ComponentName />)
    expect(screen.getByText('Expected Text')).toBeInTheDocument()
  })
})
```

## üîí Seguran√ßa

### Valida√ß√£o
- Sempre validar inputs do usu√°rio
- Sanitizar dados antes de salvar
- Verificar permiss√µes antes de opera√ß√µes

### Dados Sens√≠veis
- Nunca expor dados sens√≠veis no frontend
- Usar vari√°veis de ambiente para configura√ß√µes
- Criptografar dados sens√≠veis

## üì± Multiplataforma

### Compartilhamento de C√≥digo
- Usar pacotes compartilhados (`packages/`)
- L√≥gica de neg√≥cio reutiliz√°vel
- Tipos compartilhados

### Espec√≠fico por Plataforma
- Componentes espec√≠ficos quando necess√°rio
- Adapta√ß√µes de UI para cada plataforma
- APIs nativas quando apropriado

## üöÄ Performance

### Otimiza√ß√µes
- Lazy loading de componentes pesados
- Memoiza√ß√£o com React.memo, useMemo, useCallback
- Bundle splitting por rotas
- Otimiza√ß√£o de imagens

### Monitoramento
- M√©tricas de performance
- Error tracking
- Analytics de uso

## üåç Internacionaliza√ß√£o

### Estrutura
```typescript
// shared/messages/pt-BR.ts
export const messages = {
  common: { save: 'Salvar', cancel: 'Cancelar' },
  user: { profile: 'Perfil do Usu√°rio' }
}
```

### Uso
```typescript
const { t } = useTranslation()
return <Button>{t('common.save')}</Button>
```

## üìö Documenta√ß√£o

### JSDoc Obrigat√≥rio
```typescript
/**
 * Calcula o total de vendas
 * @param startDate - Data de in√≠cio
 * @param endDate - Data de fim
 * @returns Promise com o total
 * @throws {ValidationError} Se as datas forem inv√°lidas
 */
export const calculateSalesTotal = async (
  startDate: Date,
  endDate: Date
): Promise<number> => {
  // implementa√ß√£o
}
```

## üîÑ Commits

### Padr√£o Sem√¢ntico
```bash
feat: adiciona autentica√ß√£o com Google
fix: corrige valida√ß√£o de e-mail
docs: atualiza documenta√ß√£o da API
refactor: refatora componente UserCard
test: adiciona testes para UserService
```

## ‚ö†Ô∏è Proibi√ß√µes

### NUNCA fazer:
- Usar `any` no TypeScript
- Hardcodar strings no c√≥digo
- Duplicar c√≥digo
- Criar arquivos maiores que 300 linhas
- Esquecer tooltips nos inputs
- Ignorar testes
- Usar imports relativos longos
- Esquecer cabe√ßalhos nos arquivos
- **Ignorar o perfil do usu√°rio**
- **Criar interfaces gen√©ricas sem adapta√ß√£o**
- **Usar temas padr√£o para todos os perfis**
- **Implementar funcionalidades sem validar permiss√µes**

## ‚úÖ Checklist de Qualidade

Antes de finalizar qualquer c√≥digo:
- [ ] Cabe√ßalho inclu√≠do
- [ ] Imports com "@/"
- [ ] Sem uso de `any`
- [ ] Tooltips implementados
- [ ] Mensagens centralizadas
- [ ] **Perfil do usu√°rio considerado**
- [ ] **Componente adaptativo implementado**
- [ ] **Tema espec√≠fico aplicado**
- [ ] **Permiss√µes validadas**
- [ ] Testes escritos
- [ ] ESLint sem erros
- [ ] TypeScript sem erros
- [ ] Documenta√ß√£o atualizada

## üéØ Prioridades

1. **Qualidade do c√≥digo** acima de velocidade
2. **Reutiliza√ß√£o** acima de duplica√ß√£o
3. **Acessibilidade** para todos os usu√°rios
4. **Performance** em todas as plataformas
5. **Seguran√ßa** em todas as opera√ß√µes
6. **Testes** para todas as funcionalidades
7. **Documenta√ß√£o** para manutenibilidade 